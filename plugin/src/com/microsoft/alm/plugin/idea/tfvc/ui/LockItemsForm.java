// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See License.txt in the project root.

/*
 * Copyright 2000-2009 JetBrains s.r.o.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package com.microsoft.alm.plugin.idea.tfvc.ui;

import com.intellij.ui.components.JBScrollPane;
import com.intellij.ui.table.JBTable;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.microsoft.alm.plugin.external.commands.LockCommand;
import com.microsoft.alm.plugin.external.models.ExtendedItemInfo;

import javax.swing.AbstractButton;
import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Insets;
import java.util.List;
import java.util.ResourceBundle;

public class LockItemsForm {
    private JPanel contentPane;
    private JTable lockItemsTable;
    private JRadioButton lockCheckOutRadioButton;
    private JRadioButton lockCheckInRadioButton;
    private JCheckBox recursiveCheckBox;

    private final LockItemsTableModel lockItemsTableModel;

    public LockItemsForm(List<ExtendedItemInfo> items) {
        // Default to CheckIn since we only allow local workspaces right now
        lockCheckInRadioButton.setSelected(true);

        lockItemsTableModel = new LockItemsTableModel(items);
        lockItemsTable.setModel(lockItemsTableModel);
        for (int i = 0; i < LockItemsTableModel.Column.values().length; i++) {
            lockItemsTable.getColumnModel().getColumn(i).setPreferredWidth(LockItemsTableModel.Column.values()[i].getWidth());
        }
        lockItemsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    public JPanel getContentPane() {
        return contentPane;
    }

    public void setRadioButtonsEnabled(final boolean isEnabled) {
        lockCheckInRadioButton.setEnabled(isEnabled);
        lockCheckOutRadioButton.setEnabled(isEnabled);
    }

    public List<ExtendedItemInfo> getSelectedItems() {
        return lockItemsTableModel.getSelectedItems();
    }

    public LockCommand.LockLevel getLockLevel() {
        if (lockCheckInRadioButton.isEnabled() && lockCheckInRadioButton.isSelected()) {
            return LockCommand.LockLevel.CHECKIN;
        } else if (lockCheckOutRadioButton.isEnabled() && lockCheckOutRadioButton.isSelected()) {
            return LockCommand.LockLevel.CHECKOUT;
        }
        return LockCommand.LockLevel.NONE;
    }

    public boolean getRecursive() {
        return recursiveCheckBox.isSelected();
    }

    public void addListener(final LockItemsTableModel.Listener listener) {
        lockItemsTableModel.addListener(listener);
    }

    public void removeListener(final LockItemsTableModel.Listener listener) {
        lockItemsTableModel.removeListener(listener);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new BorderLayout(0, 0));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, BorderLayout.SOUTH);
        panel1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("LockDialog.LockBox")));
        lockCheckInRadioButton = new JRadioButton();
        this.$$$loadButtonText$$$(lockCheckInRadioButton, ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("LockDialog.CheckinRadio"));
        panel1.add(lockCheckInRadioButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        lockCheckOutRadioButton = new JRadioButton();
        this.$$$loadButtonText$$$(lockCheckOutRadioButton, ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("LockDialog.CheckoutRadio"));
        panel1.add(lockCheckOutRadioButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        recursiveCheckBox = new JCheckBox();
        recursiveCheckBox.setSelected(true);
        this.$$$loadButtonText$$$(recursiveCheckBox, ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("LockDialog.RecursiveCheck"));
        panel1.add(recursiveCheckBox, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new BorderLayout(0, 0));
        contentPane.add(panel2, BorderLayout.CENTER);
        panel2.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), ResourceBundle.getBundle("com/microsoft/alm/plugin/idea/ui/tfplugin").getString("LockDialog.ItemsBox")));
        final JBScrollPane jBScrollPane1 = new JBScrollPane();
        panel2.add(jBScrollPane1, BorderLayout.CENTER);
        lockItemsTable = new JBTable();
        lockItemsTable.setEnabled(true);
        lockItemsTable.setPreferredScrollableViewportSize(new Dimension(500, 200));
        jBScrollPane1.setViewportView(lockItemsTable);
        ButtonGroup buttonGroup;
        buttonGroup = new ButtonGroup();
        buttonGroup.add(lockCheckInRadioButton);
        buttonGroup.add(lockCheckOutRadioButton);
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadButtonText$$$(AbstractButton component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }
}
